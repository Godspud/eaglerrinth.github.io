(()=>{
    const blockVariants = ["stone", "dirt", "log", "planks", "cobblestone"];
    const oneblockTextureMap = {
        stone: "textures/blocks/stone.png",
        dirt: "textures/blocks/dirt.png",
        log: "textures/blocks/log_oak.png",
        planks: "textures/blocks/planks_oak.png",
        cobblestone: "textures/blocks/cobblestone.png"
    };

    ModAPI.meta.title("OneBlock");
    ModAPI.meta.version("v1.1");
    ModAPI.meta.description("OneBlock that mimics its next drop using variants.");
    ModAPI.meta.credits("By ChatGPT");

    function OneBlockMod() {
        function fixupBlockIds() {
            const blockRegistry = ModAPI.util.wrap(ModAPI.reflect.getClassById("net.minecraft.block.Block").staticVariables.blockRegistry).getCorrective();
            const BLOCK_STATE_IDS = ModAPI.util.wrap(ModAPI.reflect.getClassById("net.minecraft.block.Block").staticVariables.BLOCK_STATE_IDS).getCorrective();
            blockRegistry.registryObjects.hashTableKToV.forEach(entry => {
                if (entry) {
                    const block = entry.value;
                    const validStates = block.getBlockState().getValidStates();
                    const stateArray = validStates.array || [validStates.element];
                    stateArray.forEach(iblockstate => {
                        const i = blockRegistry.getIDForObject(block.getRef()) << 4 | block.getMetaFromState(iblockstate.getRef());
                        BLOCK_STATE_IDS.put(iblockstate.getRef(), i);
                    });
                }
            });
        }

        const itemClass = ModAPI.reflect.getClassById("net.minecraft.item.Item");
        const blockClass = ModAPI.reflect.getClassById("net.minecraft.block.Block");
        const ipropertyEnum = ModAPI.reflect.getClassById("net.minecraft.block.properties.PropertyEnum").constructors[0];
        const makeBlockState = ModAPI.reflect.getClassById("net.minecraft.block.state.BlockState").constructors.find(x => x.length === 2);
        const blockSuper = ModAPI.reflect.getSuper(blockClass, (x) => x.length === 2);
        const creativeBlockTab = ModAPI.reflect.getClassById("net.minecraft.creativetab.CreativeTabs").staticVariables.tabBlock;
        const breakBlockMethod = blockClass.methods.breakBlock.method;

        const variantProperty = ipropertyEnum(ModAPI.util.str("variant"), ModAPI.util.strArray(blockVariants));

        const nmb_OneBlock = function nmb_OneBlock() {
            blockSuper(this, ModAPI.materials.rock.getRef());
            this.$setCreativeTab(creativeBlockTab);
        };

        ModAPI.reflect.prototypeStack(blockClass, nmb_OneBlock);

        nmb_OneBlock.prototype.$createBlockState = function () {
            return makeBlockState(this, ModAPI.array.object(ModAPI.reflect.getClassById("net.minecraft.block.properties.IProperty").class, 1, [variantProperty]));
        };

        nmb_OneBlock.prototype.$getMetaFromState = function ($state) {
            const val = ModAPI.util.wrap($state).getValue(variantProperty).toString();
            return blockVariants.indexOf(val);
        };

        nmb_OneBlock.prototype.$getStateFromMeta = function (meta) {
            return this.$getDefaultState().withProperty(variantProperty, ModAPI.util.str(blockVariants[meta % blockVariants.length]));
        };

        nmb_OneBlock.prototype.$getActualState = function ($state, $world, $pos) {
            return $state;
        };

        nmb_OneBlock.prototype.$breakBlock = function ($world, $blockpos, $state) {
            const world = ModAPI.util.wrap($world);
            const pos = ModAPI.util.wrap($blockpos);
            const variant = blockVariants[Math.floor(Math.random() * blockVariants.length)];

            // Drop the actual block above
            const dropBlock = ModAPI.blocks[variant];
            if (dropBlock) {
                world.setBlock(pos.getX(), pos.getY() + 1, pos.getZ(), dropBlock.getDefaultState().getRef(), 2);
            }

            // Regenerate OneBlock with new variant
            ModAPI.setTimeout(() => {
                const newState = ModAPI.blocks["oneblock"].getDefaultState().withProperty(variantProperty, ModAPI.util.str(variant));
                world.setBlock(pos.getX(), pos.getY(), pos.getZ(), newState.getRef(), 2);
            }, 300);

            return breakBlockMethod(this, $world, $blockpos, $state);
        };

        function internal_reg() {
            const block_oneblock = (new nmb_OneBlock())
                .$setHardness(0.5)
                .$setUnlocalizedName(ModAPI.util.str("oneblock"))
                .$setDefaultState(
                    (function () {
                        const b = new nmb_OneBlock();
                        return b.$getDefaultState().withProperty(variantProperty, ModAPI.util.str("stone"));
                    })()
                );

            blockClass.staticMethods.registerBlock0.method(546, ModAPI.util.str("oneblock"), block_oneblock);
            itemClass.staticMethods.registerItemBlock0.method(block_oneblock);
            fixupBlockIds();
            ModAPI.blocks["oneblock"] = block_oneblock;

            return block_oneblock;
        }

        if (ModAPI.materials) {
            return internal_reg();
        } else {
            ModAPI.addEventListener("bootstrap", internal_reg);
        }
    }

    ModAPI.dedicatedServer.appendCode(OneBlockMod);
    const block_oneblock = OneBlockMod();

    ModAPI.addEventListener("lib:asyncsink", async () => {
        ModAPI.addEventListener("custom:asyncsink_reloaded", () => {
            ModAPI.mc.renderItem.registerBlock(block_oneblock, ModAPI.util.str("oneblock"));
        });

        AsyncSink.L10N.set("tile.oneblock.name", "OneBlock");

        // Blockstate definition with variants
        AsyncSink.setFile("resourcepacks/AsyncSinkLib/assets/minecraft/blockstates/oneblock.json", JSON.stringify({
            variants: Object.fromEntries(
                blockVariants.map(v => [ `variant=${v}`, { model: `oneblock/${v}` } ])
            )
        }));

        // Model and texture for each variant
        for (const variant of blockVariants) {
            AsyncSink.setFile(`resourcepacks/AsyncSinkLib/assets/minecraft/models/block/oneblock/${variant}.json`, JSON.stringify({
                parent: "block/cube_all",
                textures: {
                    all: oneblockTextureMap[variant]
                }
            }));
            AsyncSink.setFile(`resourcepacks/AsyncSinkLib/assets/minecraft/models/item/oneblock/${variant}.json`, JSON.stringify({
                parent: `block/oneblock/${variant}`
            }));
        }
    });
})();
